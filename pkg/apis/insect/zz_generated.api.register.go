/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package insect

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalBee = builders.NewInternalResource(
		"bees",
		"Bee",
		func() runtime.Object { return &Bee{} },
		func() runtime.Object { return &BeeList{} },
	)
	InternalBeeStatus = builders.NewInternalResourceStatus(
		"bees",
		"BeeStatus",
		func() runtime.Object { return &Bee{} },
		func() runtime.Object { return &BeeList{} },
	)
	InternalScaleBeeREST = builders.NewInternalSubresource(
		"bees", "Scale", "scale",
		func() runtime.Object { return &Scale{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("insect.tamalsaha.com").WithKinds(
		InternalBee,
		InternalBeeStatus,
		InternalScaleBeeREST,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Bee struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   BeeSpec
	Status BeeStatus
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Scale struct {
	metav1.TypeMeta
	metav1.ObjectMeta
}

type BeeStatus struct {
}

type BeeSpec struct {
}

//
// Bee Functions and Structs
//
// +k8s:deepcopy-gen=false
type BeeStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type BeeStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type BeeList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Bee
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ScaleList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Scale
}

func (Bee) NewStatus() interface{} {
	return BeeStatus{}
}

func (pc *Bee) GetStatus() interface{} {
	return pc.Status
}

func (pc *Bee) SetStatus(s interface{}) {
	pc.Status = s.(BeeStatus)
}

func (pc *Bee) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Bee) SetSpec(s interface{}) {
	pc.Spec = s.(BeeSpec)
}

func (pc *Bee) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Bee) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Bee) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Bee.
// +k8s:deepcopy-gen=false
type BeeRegistry interface {
	ListBees(ctx request.Context, options *internalversion.ListOptions) (*BeeList, error)
	GetBee(ctx request.Context, id string, options *metav1.GetOptions) (*Bee, error)
	CreateBee(ctx request.Context, id *Bee) (*Bee, error)
	UpdateBee(ctx request.Context, id *Bee) (*Bee, error)
	DeleteBee(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewBeeRegistry(sp builders.StandardStorageProvider) BeeRegistry {
	return &storageBee{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageBee struct {
	builders.StandardStorageProvider
}

func (s *storageBee) ListBees(ctx request.Context, options *internalversion.ListOptions) (*BeeList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*BeeList), err
}

func (s *storageBee) GetBee(ctx request.Context, id string, options *metav1.GetOptions) (*Bee, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Bee), nil
}

func (s *storageBee) CreateBee(ctx request.Context, object *Bee) (*Bee, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Bee), nil
}

func (s *storageBee) UpdateBee(ctx request.Context, object *Bee) (*Bee, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Bee), nil
}

func (s *storageBee) DeleteBee(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
